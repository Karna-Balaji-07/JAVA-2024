In Java, all arrays are dynamically allocated
Arrays may be stored in contiguous memory [consecutive memory locations].
An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values might be stored in contiguous memory locations

// both are valid declarations
int intArray[];
int[] intArray;
// similar to int we can declare
// byte , short, boolean, long, float
// double, char

Although the first declaration establishes that int Array is an array variable, no actual array exists.
 It merely tells the compiler that this variable (int Array) will hold an array of the integer type.
 To link int Array with an actual, physical array of integers,
  you must allocate one using new and assign it to int Array


  When an array is declared, only a reference of an array is created.
  To create or give memory to the array, you create an array like this:
  The general form of new as it applies to one-dimensional arrays appears as follows:

  var-name = new type [size];

  Here, type specifies the type of data being allocated, size determines the number of elements in the array,
  and var-name is the name of the array variable that is linked to the array.
  To use new to allocate an array, you must specify the type and number of elements to allocate.

Literals in Java :

In a situation where the size of the array and variables of the array are already known, array literals can be used.
// Declaring array literal
int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 };
The length of this array determines the length of the created array.
There is no need to write the new int[] part in the latest versions of Java.

We can access elements of an array using for loop via its index

Arrays of Objects in Java
An array of objects is created like an array of primitive-type data items in the following way.

Student[] arr = new Student[5]; //student is a user-defined class
Syntax:

-- data type[] arrName;
-- datatype arrName[];
-- datatype [] arrName;


     int [] arr1 = new int[5];
        System.out.println(arr1.length);

